import com.google.gson.Gson;
import locNormV3.ESConfig;
import org.apache.commons.lang3.StringUtils;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.common.unit.TimeValue;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.springframework.util.CollectionUtils;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

public class MainApplication3 {
    private static ESConfig esConfig = new ESConfig();

    private static Client esClient;

    private static String url = "http://dh-ldaservice.dailyhunt.in/ldatopics";

    public static void main(String args[]) {
        try {
            esClient = ESConfig.getConnection();
            String startDate = "2018-12-18";
            String endDate = "2019-12-31";
            DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            Date start = format.parse(startDate);
            Date end = format.parse(endDate);
            Calendar cal = Calendar.getInstance();
            cal.setTime(start);
            while (start.before(end) || start.equals(end)) {
                System.out.println(" File write Started for date ::: " + getDateString(start) );
                getData(getDateString(start));
                System.out.println(" File write ended for date ::: " + getDateString(start) );
                cal.add(Calendar.DATE, 1);
                start = cal.getTime();
            }
            esClient.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String getDateString(Date date) {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        return dateFormat.format(date);
    }

    private static void getData(String dateToFetch){
        BoolQueryBuilder builder = QueryBuilders.boolQuery();
        builder.must(QueryBuilders.termQuery("language", "TAMIL"));
        String dateString = dateToFetch;
        builder.must(QueryBuilders.rangeQuery("date").from(dateString + "T00:00:00.000Z").to(dateString + "T23:59:59.999Z")
            .includeLower(true).includeUpper(true));
        SearchResponse scrollResp = esClient.prepareSearch("content-enrichment").setTypes("news")
            .setScroll(new TimeValue(60000)).setQuery(builder).setSize(200).setFetchSource(new String[]{"id", "title", "text", "category", "locNormV3", "locations"}, null).execute().actionGet();
        try{
            int i=0;
            while (true) {
                long time1 = System.currentTimeMillis();
                SearchHit[] hits = scrollResp.getHits().getHits();
                if (hits != null && hits.length > 0) {
                    for (SearchHit hit : hits) {
                        StringBuilder stringBuilder = new StringBuilder();
                        Object idObj = hit.getSource().get("id");
                        Object categoryObj = hit.getSource().get("category");
                        Object locNormV3Obj = hit.getSource().get("locNormV3");
                        Object locationsObj = hit.getSource().get("locations");
                        Object titleObj = hit.getSource().get("title");
                        Object textObj = hit.getSource().get("text");
                        if(idObj != null) {
                            String id = idObj.toString();
                            stringBuilder.append(id).append("\t");

                            if(titleObj != null){
                                String title = titleObj.toString();
                                if(StringUtils.isNotEmpty(title)){
                                    stringBuilder.append(title).append("\t");
                                }
                            }

                            if(textObj != null) {
                                String text = textObj.toString();
                                if(StringUtils.isNotEmpty(text)){
                                    stringBuilder.append(text).append("\t");
                                }
                            }

                            if(categoryObj != null){
                                String category = categoryObj.toString();
                                if(StringUtils.isNotEmpty(category)){
                                    stringBuilder.append(category).append("\t");
                                }
                            }

                            if(locationsObj!= null || locNormV3Obj != null) {

                                if (locationsObj != null) {
                                    String locations = locationsObj.toString();
                                    Map<LocationType, Map<Location, Set<KeywordType>>> location = adaptFrom(locations);
                                    if (!CollectionUtils.isEmpty(location)) {
                                        String loc = getLocationEnrichmentResult(location);
                                        if (StringUtils.isNotEmpty(loc)) {
                                            stringBuilder.append(loc).append("\t");
                                        }
                                    }
                                }

                                if (locNormV3Obj != null) {
                                    String locNorm = locNormV3Obj.toString();
                                    if (StringUtils.isNotEmpty(locNorm)) {
                                        stringBuilder.append(locNorm).append("\t");
                                    }
                                }
                                //     System.out.println(stringBuilder.toString());
                                writeDataInFile(stringBuilder.toString());
                            }
                        }
                    }
                }
                scrollResp = esClient.prepareSearchScroll(scrollResp.getScrollId()).
                    setScroll(new TimeValue(60000)).execute().actionGet();
                System.out.println("A Batch of "+ hits.length+" fetched from ES");
                System.out.println("Completed Batch-"+ (++i) + " Time taken to complete "+  (System.currentTimeMillis() - time1 ));
                if (scrollResp.getHits().getHits().length == 0) {
                    System.out.println(" Completed fetching from ES : ");
                    break;
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    public static Map<LocationType, Map<Location, Set<KeywordType>>> adaptFrom(String location) {

        Map<LocationType, Map<Location, Set<KeywordType>>> locationMap = new HashMap<>();

        if (location != null) {
            try {
                String[] types = location.split("\\|");

                for (String type : types) {
                    if (StringUtils.isNotBlank(type)) {
                        Map<Location, Set<KeywordType>> locTypeMap = new HashMap<>();
                        String[] locs = type.split(":");
                        LocationType locType = LocationType.valueOf(locs[0].toUpperCase());
                        String[] diffLocs = locs[1].split(",");
                        for (String allLoc : diffLocs) {
                            String[] locNames = allLoc.split(";");
                            int size = locNames.length;
                            boolean isAmbiguous = Boolean.valueOf(locNames[size - 2]);
                            Set<KeywordType> kwdTypeSet = new HashSet<KeywordType>();
                            for (String kwdType : locNames[size - 1].split(" ")) {
                                KeywordType kType = KeywordType.valueOf(kwdType);
                                kwdTypeSet.add(kType);
                            }
                            switch (locType) {
                                case CITY:
                                    City city = new City(locNames[0], isAmbiguous);
                                    District cityDistrict = new District(locNames[1], isAmbiguous);
                                    State cityState = new State(locNames[2], isAmbiguous);
                                    cityDistrict.setState(cityState);
                                    city.setDistrict(cityDistrict);
                                    locTypeMap.put(city, kwdTypeSet);
                                    break;
                                case DISTRICT:
                                    District district = new District(locNames[0], isAmbiguous);
                                    State districtState = new State(locNames[1], isAmbiguous);
                                    district.setState(districtState);
                                    locTypeMap.put(district, kwdTypeSet);
                                    break;
                                case STATE:
                                    State state = new State(locNames[0], isAmbiguous);
                                    locTypeMap.put(state, kwdTypeSet);
                                    break;
                            }
                        }
                        locationMap.put(locType, locTypeMap);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        return locationMap;
    }

    private static String getLocationEnrichmentResult(Map<LocationType, Map<Location, Set<KeywordType>>> locationsMap) {
        Gson gson = new Gson();
        List<Map<String, String>> enrichmentResult = new ArrayList<>();
        for (Map.Entry<LocationType, Map<Location, Set<KeywordType>>> entry : locationsMap.entrySet()) {
            for (Map.Entry<Location, Set<KeywordType>> locationMap : entry.getValue().entrySet()) {
                Map<String, String> er = new HashMap<>();
                String value = locationMap.getKey().getId();
                if(value == null) {
                    value = locationMap.getKey().getName();
                }
                er.put("value", value);
                er.put("text", locationMap.getKey().getName());
                enrichmentResult.add(er);
            }
        }

        if(CollectionUtils.isEmpty(enrichmentResult)){
            return "";
        }

        return gson.toJson(enrichmentResult);
    }


    private static void writeDataInFile(String newsItem) {
        try{
            FileWriter fileWriter = createFileToWrite("locationDataDecember");
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
            Gson gson = new Gson();
            if (newsItem != null) {
                writeLine(bufferedWriter, newsItem);
            }
            bufferedWriter.close();
            fileWriter.close();
        } catch(Exception e){
            e.printStackTrace();
        }
    }

    private static FileWriter createFileToWrite(String fileName) {
        FileWriter fw = null;
        File file;
        try {
            file = new File("/home/karamveer/Desktop/projects/springWithAngular/EsDataFetch/src/main/resources/locationData/" + fileName+".tsv");
      //      System.out.println(" File to be written " + file.getAbsolutePath());
            fw = new FileWriter(file.getAbsoluteFile(), true);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return fw;
    }

    private static void writeLine(BufferedWriter bw, String jsonData) {
        try {
            bw.write(jsonData);
            bw.write('\n');
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}