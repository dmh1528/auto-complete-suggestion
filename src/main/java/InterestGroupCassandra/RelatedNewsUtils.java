package InterestGroupCassandra;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class RelatedNewsUtils {

    private static final Logger LOG = LoggerFactory.getLogger(RelatedNewsUtils.class);

    public enum DistanceCalculatioMethod {
        DOT_PRODUCT, EUCLIDEAN
    }

    public static double calculateEuclideanDistanceBetweenDocVectors(DocVector vector1, DocVector vector2) {

        List<Double> vectors1 = vector1.getVector();
        List<Double> vectors2 = vector2.getVector();
        return calculateEuclideanDistanceBetweenDocVectors(vectors1, vectors2);
    }

    public static double calculateEuclideanDistanceBetweenDocVectors(List<Double> vector1, List<Double> vector2) {

        double sum = 0.0;
        for (int i = 0; i < vector1.size(); i++) {
            sum += ((vector1.get(i) - vector2.get(i)) * (vector1.get(i) - vector2.get(i)));
        }
        return Math.sqrt(sum);
    }

    public static double calculateSimilarityBetweenDocVectors(DocVector vector1, DocVector vector2,
                                                              DistanceCalculatioMethod method) {

        List<Double> doubleVec1 = vector1.getVector();
        List<Double> doubleVec2 = vector2.getVector();
        if (doubleVec1.size() != doubleVec2.size()) {
            LOG.error("Error while calculateSimilarityBetweenDocVectors Sizes of both vectors must be same to calculate similarity. id {} , size {} # id {} , size {} ", vector1.getId() , vector1.getVectorSize(), vector2.getId() , vector2.getVectorSize());
            return 0.0;
        }

        double similarity = calculateSimilarityBetweenDocVectors(doubleVec1, doubleVec2, method);
        // LOG.debug("Between Vectors {} and {} Similarity {}", vector1.getId(),
        // vector2.getId(), similarity);
        return similarity;
    }

    public static double calculateSimilarityBetweenDocVectors(List<Double> vector1, List<Double> vector2,
                                                              DistanceCalculatioMethod method) {

        if (method == DistanceCalculatioMethod.DOT_PRODUCT) {
            // Assuming the vector is already divided by its own magnitude
            double sum = 0.0;
            for (int i = 0; i < vector1.size(); i++) {
                sum += vector1.get(i) * vector2.get(i);
            }
            return sum;

        } else if (method == DistanceCalculatioMethod.EUCLIDEAN) {
            return 1 / (1 + calculateEuclideanDistanceBetweenDocVectors(vector1, vector2));

        } else {
            throw new IllegalArgumentException("Invalid distance calculation method.");
        }

    }

    public static boolean sendDocVectorToOtherServers(List<String> urlsToSendDocVector, String language,
                                                      String createdDate, DocVector docVector) {

        Gson gson = new GsonBuilder().create();
        boolean status = true;

        for (String url : urlsToSendDocVector) {
            UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url).queryParam("language", language)
                    .queryParam("createdDate", createdDate).queryParam("payload", gson.toJson(docVector));
            RestTemplate restTemplate = new RestTemplate();
            ResponseEntity<String> responseEntity = restTemplate.getForEntity(builder.build().encode().toUri(),
                    String.class);
            if (responseEntity.getStatusCode() != HttpStatus.OK) {
                LOG.error("Error while sending doc vector to server {}", url);
                status = false;
            }
        }

        return status;
    }

    public static List<Double> getRandomVector(int size) {

        List<Double> vector = new ArrayList<Double>();
        for (int i = 0; i < size; i++) {
            vector.add(Math.random());
        }
        return vector;
    }

    public static void main(String[] args){
        List<Double> list1 = Arrays.asList(0.21576849200240325, -0.10912639927644198, 0.05457756085979338, -0.00638895260460401, 0.0779263830206216, -0.07830022564847038, -0.10240105325748666, -0.10053619357141114, 0.14186097451343452, 0.0704387761778057, -0.10729197680623631, -0.03465554938224337, 0.08901858995675295, 0.018718632761428954, -0.0035533756467158923, 0.0289063654542612, 0.017326372199205388, -0.05495584933158235, 0.05976735746850257, -0.02583498946145347, -0.04970568828819393, -0.15960820700427014, 0.07880197406083295, 0.033378830871448044, -0.010091587160040836, -0.027656229616335213, 0.0675695918456895, -0.09402078155982625, 0.11369470903250409, -0.01947608556952379, -0.036308132030974986, -0.024608910332695137, -0.060389605621109475, -0.029298449716099, 0.07416518426469454, 0.011721226408405283, -0.11628828799663703, 0.1145694426863529, 0.07172800439910605, -0.006857064770622304, 0.031384332149979315, -0.09895011749586965, -0.2373556919255926, -0.008787627230173069, 0.11028114349027464, -0.1371834736475994, 0.12900822076824833, -0.03191126628674123, -0.12593793498654815, 0.023439052836407428, 0.010832904843744245, -0.11392349814858845, 0.10661105681788999, 0.02911979922406834, -0.16266085723544452, -0.0906167359627256, 0.08955326644019376, -0.09317696555386078, 6.468438175675803E-5, -0.08394870917861018, 0.01780302912575587, -0.13697888352247128, 0.07883074824280996, 0.0233933489694013, -0.05973508721971972, 0.12061216872676032, 0.12885838511013428, -0.02969422776099434, -0.030021501744212715, 0.1643129224958539, 0.0390201005301238, 0.0620944334034924, -0.08088401119078992, -0.08846951529543103, -0.151469733043367, -0.05121961456220226, -0.05383090298947852, 0.07888974529406619, -0.06617977594328842, -0.005833964471931452, -0.07173557305113391, 0.07344176452130896, 0.11544160418111411, -0.0595015048703931, 0.04459128994055526, 0.11518425522964337, -0.09377015865654433, 0.09855143283729272, 0.09499588854818516, 0.005162234131704652, -0.053764126635234666, 0.05292609059595453, -0.09130911240677815, -0.052937997918627265, -0.09988276907675979, 0.0363116724453513, -0.00671828043468004, 0.015807052151937943, 0.048124313055122867, 0.04905460312788517, -0.01049961160174151, 0.0663544979797011, -0.05257923716037111, 0.01578445891259599, -0.010199593820119073, 0.03911436129116999, 0.035936861562213804, -0.15413344029894557, 0.06078744767584738, -0.04583965557129309, -0.0076127381324518, -0.07984525065627482, 0.025299389070294415, -0.051481900876519306, 0.08087403298743288, -0.060297872671580405, 0.006277345938101631, 0.0029093519130976727, 0.0710605069420904, 0.0866429793015083, 0.036795256831973176, 0.04734903252369678, -0.13572109772863822, -0.12492814080681544, -0.03519381801889271, -0.12501080467818224, -0.057589437195546156, -0.0032392994542757153, -0.11702672678389038, -0.0923756714767198, 0.08570590774609409, 0.00902253353925993, 0.12167577129200358, 0.07896526920658638, -0.1824165911931266, -0.053435452007915434, 0.019708902923259698, -0.0373757480513463, -0.02789544965055856, 0.09586677874592608, -0.004894380811431327, 0.07488867052943583, 0.08890699668691249, -0.06703545492435616, 0.09600225318246773, -0.04509827136623396, 0.00197584109802957, 0.061879384642993765, 0.12185724155039032, 0.009132194918061545);
        List<Double> list2 =  Arrays.asList(0.10915808919048349, 0.013111465500071827, 0.03839578140693744, 0.05564206630851093, 0.025153693246798104, -0.03225677151973778, -0.025359875585062593, -0.0761823955252265, 0.031313329717728794, 0.06723685050179963, 0.007311920983580133, -0.038913695835613944, 0.010488547084981124, 0.009214224657910688, -0.06109813518067822, 0.06962535926230891, -0.009859104604419468, 0.03312085675638373, -0.016781340180077618, 0.05351473328559851, -0.10400927825152399, -0.025362593942887035, 0.046471310442048476, 0.029348599489426044, -0.03927167480031056, -0.006924381037251674, -0.07677870859965726, -0.1575273886096416, 0.034616957867794604, 0.027080102051913617, -0.1715304383654435, -0.08925399486976376, -0.023679522231999952, -0.07540144750518406, -0.11251314579450951, 0.07730493814164487, -0.08912047061785464, 0.11617113693670511, 0.05880540910337558, -0.07619417352952046, 0.060093103554718516, -0.12215976272299746, -0.11709855156075599, 0.001362200823868388, 0.17891709795327024, -0.24750701802043987, -0.09255435959878948, -0.1548243296659245, -0.04356612350262416, 0.06190025020883147, -0.008437380268056719, -0.029007035045483336, 0.08731681700715774, 0.01643224342637819, -0.08482465809779294, -0.08213837318461027, -0.014662192383071735, -0.060324465494128184, 0.07412281270031064, -0.03510248162495375, 0.16100174679477514, 0.04779207515436487, 0.02914950761180091, 0.06196342187581655, 0.009120113115329065, 0.023387952841731178, 0.07432404540069343, 0.002573147475175117, 0.015076061202134117, 0.1818696798788589, 0.07862142120844598, 0.05891217191110518, -0.0447823427707606, -0.07686102474231038, -0.034177620680053644, 0.08987129403770608, 0.013325284521900288, 0.159275635964613, -0.09475890140605346, 0.10478510499675725, 0.013402651026671705, 0.01974295507882953, 0.09969746174768357, -0.07015170013635759, 0.11267877079069362, 0.05291882378988914, 0.06278509887486686, 0.011602796622558791, -0.06599784527183102, -0.003602042722526889, 0.009280473612646261, -0.02752230604022711, -0.08468476936305934, 0.0456484737340287, -0.0722357342651858, -0.03148551634726218, -0.05664775664916529, -0.03963621771777439, 0.04786868552888819, 0.0019234782205496594, 0.053005815879107174, 0.18670390352392358, 0.057767330410621806, -0.10534153336030991, 0.041197775122840195, 0.11582040383364976, -0.014944146626274616, -0.06829581787251154, 0.07050008134962285, -0.09632224476293226, 0.11580740581551992, -0.13110578554651975, 0.03658249293412216, -0.1402470476944706, -0.015589837789207542, -0.08717978579532491, -0.07629107417217366, 5.444732499545274E-4, -0.06384457651752533, 0.08549084131821644, -0.09218310428581035, -0.19090310764799237, -0.12786485358276153, -0.017213635614955942, 0.07989760206913998, 0.052758222652960776, -0.08977704217033915, 0.022151113948117532, -0.12473730404553067, -0.13385905524977912, -0.03829264153002848, 0.07202147107482203, 0.013034051447232664, 0.06309235216923877, -0.04033433004554539, -0.03689244371155707, -0.07500556461252922, 0.19009082893043067, -0.04433514971446043, 0.14887469793402167, -0.008763765861152495, 0.03624843644604781, 0.027459964724864172, 0.056162539055174085, 0.08006191891360653, -0.17091677604482947, -0.008469561032250597, 0.03654621491813914, 0.07131557941928382, 0.07695159801282614);

        double distance = calculateSimilarityBetweenDocVectors(list2 , list1, DistanceCalculatioMethod.EUCLIDEAN);

        System.out.println("Distance : "+distance);

    }
}